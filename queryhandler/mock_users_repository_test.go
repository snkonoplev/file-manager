// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/snkonoplev/file-manager/db (interfaces: IUsersRepository)

// Package queryhandler_test is a generated GoMock package.
package queryhandler_test

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/snkonoplev/file-manager/entity"
)

// MockIUsersRepository is a mock of IUsersRepository interface.
type MockIUsersRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIUsersRepositoryMockRecorder
}

// MockIUsersRepositoryMockRecorder is the mock recorder for MockIUsersRepository.
type MockIUsersRepositoryMockRecorder struct {
	mock *MockIUsersRepository
}

// NewMockIUsersRepository creates a new mock instance.
func NewMockIUsersRepository(ctrl *gomock.Controller) *MockIUsersRepository {
	mock := &MockIUsersRepository{ctrl: ctrl}
	mock.recorder = &MockIUsersRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUsersRepository) EXPECT() *MockIUsersRepositoryMockRecorder {
	return m.recorder
}

// Authorize mocks base method.
func (m *MockIUsersRepository) Authorize(arg0 context.Context, arg1, arg2 string) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authorize", arg0, arg1, arg2)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authorize indicates an expected call of Authorize.
func (mr *MockIUsersRepositoryMockRecorder) Authorize(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorize", reflect.TypeOf((*MockIUsersRepository)(nil).Authorize), arg0, arg1, arg2)
}

// ChangePassword mocks base method.
func (m *MockIUsersRepository) ChangePassword(arg0 context.Context, arg1, arg2 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePassword", arg0, arg1, arg2)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangePassword indicates an expected call of ChangePassword.
func (mr *MockIUsersRepositoryMockRecorder) ChangePassword(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockIUsersRepository)(nil).ChangePassword), arg0, arg1, arg2)
}

// CheckUserExists mocks base method.
func (m *MockIUsersRepository) CheckUserExists(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUserExists indicates an expected call of CheckUserExists.
func (mr *MockIUsersRepositoryMockRecorder) CheckUserExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserExists", reflect.TypeOf((*MockIUsersRepository)(nil).CheckUserExists), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockIUsersRepository) CreateUser(arg0 context.Context, arg1 entity.User) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockIUsersRepositoryMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIUsersRepository)(nil).CreateUser), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockIUsersRepository) DeleteUser(arg0 context.Context, arg1 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockIUsersRepositoryMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockIUsersRepository)(nil).DeleteUser), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockIUsersRepository) GetUser(arg0 context.Context, arg1 int64) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockIUsersRepositoryMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockIUsersRepository)(nil).GetUser), arg0, arg1)
}

// ListUsers mocks base method.
func (m *MockIUsersRepository) ListUsers(arg0 context.Context) ([]entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", arg0)
	ret0, _ := ret[0].([]entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockIUsersRepositoryMockRecorder) ListUsers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockIUsersRepository)(nil).ListUsers), arg0)
}

// UpdateUser mocks base method.
func (m *MockIUsersRepository) UpdateUser(arg0 context.Context, arg1 entity.User) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockIUsersRepositoryMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockIUsersRepository)(nil).UpdateUser), arg0, arg1)
}
